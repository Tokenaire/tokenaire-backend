// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using Tokenaire.Database;

namespace tokenairebackend.Migrations
{
    [DbContext(typeof(TokenaireContext))]
    [Migration("20180517173853_brandnew")]
    partial class brandnew
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Tokenaire.Database.Models.DatabaseEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Ip");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("Value")
                        .IsUnique()
                        .HasFilter("[Value] IS NOT NULL");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("Tokenaire.Database.Models.DatabaseIcOOutboundAIRETransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressSource");

                    b.Property<string>("TxIdSource");

                    b.HasKey("Id");

                    b.HasIndex("TxIdSource", "AddressSource")
                        .IsUnique()
                        .HasFilter("[TxIdSource] IS NOT NULL AND [AddressSource] IS NOT NULL");

                    b.ToTable("ICOOutboundAIRETransactions");
                });

            modelBuilder.Entity("Tokenaire.Database.Models.DatabaseUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("EncryptedSeed")
                        .IsRequired();

                    b.Property<string>("ICOBTCAddress");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PublicKey")
                        .IsRequired();

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Signature")
                        .IsRequired();

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
